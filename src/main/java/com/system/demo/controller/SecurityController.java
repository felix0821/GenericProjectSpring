package com.system.demo.controller;

import static com.system.demo.GenericProjectSystemStatement.*;
import static com.system.demo.GenericProjectSystemDefinition.*;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.system.demo.dto.Message;
import com.system.demo.dto.RoleDto;
import com.system.demo.dto.RoleHeaderDto;
import com.system.demo.dto.RoleRegisterDto;
import com.system.demo.dto.RoleTypeDto;
import com.system.demo.persistence.entity.Role;
import com.system.demo.service.RoleService;
import com.system.demo.utility.UniqId;

@RestController
@RequestMapping(value=URL_SECURITY_REQUEST)
@CrossOrigin(origins = "*")
public class SecurityController {
	
	@Autowired
	UniqId uI;
	
	@Autowired
	RoleService roleService;
	
	@SuppressWarnings(value = { "rawtypes", "unchecked" })
	@GetMapping(value=URL_SECURITY_ROLE_GET)
	public ResponseEntity<?> securityRole(@RequestHeader HttpHeaders headers){
		try {
			List<RoleHeaderDto> roleHeadersDto = new ArrayList<>();
			//	Agregar roles definidos por el usuario
			RoleHeaderDto roleHeaderDto = this.roleHeaderDtoByType(SYSTEM_TYPE_DEFINED_USER, SYSTEM_TYPE_DEFINED_USER_DESCRIPTION);
			roleHeadersDto.add(roleHeaderDto);
			//	Agregar roles definidos localmente
			roleHeaderDto = this.roleHeaderDtoByType(SYSTEM_TYPE_LOCAL_GENERATED, SYSTEM_TYPE_LOCAL_GENERATED_DESCRIPTION);
			roleHeadersDto.add(roleHeaderDto);
			//	Agregar roles definidos por el sistema
			roleHeaderDto = this.roleHeaderDtoByType(SYSTEM_TYPE_AUTOGENERATED, SYSTEM_TYPE_AUTOGENERATED_DESCRIPTION);
			roleHeadersDto.add(roleHeaderDto);
			return new ResponseEntity<List<RoleHeaderDto>>(roleHeadersDto, HttpStatus.OK);
		} catch(Exception e) {
			e.printStackTrace();
			return new ResponseEntity(new Message(SYSTEM_ERROR_ROLE), HttpStatus.BAD_REQUEST);
		}
	}
	
	@SuppressWarnings(value = { "rawtypes", "unchecked" })
	@PostMapping(value=URL_SECURITY_ROLE_REGISTER_POST)
    public ResponseEntity<?> roleRegister(@Valid @RequestBody RoleRegisterDto roleRegister, BindingResult bindingResult) {
		//Realizamos las validaciones pertinentes
        if(bindingResult.hasErrors())
            return new ResponseEntity(new Message(bindingResult.getFieldError().getDefaultMessage()), HttpStatus.BAD_REQUEST);
        Long idRole = uI.getUniqId();
		char type = SYSTEM_TYPE_DEFINED_USER;
		char state = SYSTEM_STATE_ACTIVE;
		Role role = new Role(idRole, roleRegister.getName(), state, type);
		role.setRoleDescription(roleRegister.getDescription());
		try {
			roleService.createRole(role);
			return new ResponseEntity(new Message(SYSTEM_SUCCESS_REGISTER_ROLE), HttpStatus.CREATED);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity(new Message(SYSTEM_ERROR_REGISTER_ROLE), HttpStatus.BAD_REQUEST);
		}
	}
	
	@SuppressWarnings(value = { "rawtypes", "unchecked" })
	@GetMapping(value = URL_SECURITY_EDITxROLE_GET)
	public ResponseEntity<?> securityEditRoleForm(@PathVariable(name ="id")Long id) {
		//	Buscamos rol por id
		Role role = null;
		try {
			role = roleService.getRoleById(id);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity(new Message(SYSTEM_ERROR_NO_ID), HttpStatus.BAD_REQUEST);
		}
		RoleDto roleDto = new RoleDto(role.getRoleId(), role.getRoleName(), role.getRoleDescription(), role.getRoleState());
		return new ResponseEntity<RoleDto>(roleDto, HttpStatus.OK);
	}
	
	@SuppressWarnings(value = { "rawtypes", "unchecked" })
	@PostMapping(value = URL_SECURITY_EDITxROLE_POST)
    public ResponseEntity<?> securityEditRole(@Valid @RequestBody RoleDto roleEditDto, BindingResult bindingResult) {
		//	Realizamos las validaciones pertinentes
        if(bindingResult.hasErrors())
            return new ResponseEntity(new Message(bindingResult.getFieldError().getDefaultMessage()), HttpStatus.BAD_REQUEST);
        Role roleEdit = null;
        //	Buscamos programa por id
        try {
			roleEdit = roleService.getRoleById(roleEditDto.getId());
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity(new Message(SYSTEM_ERROR_NO_ID), HttpStatus.BAD_REQUEST);
		}
        roleEdit.setRoleName(roleEditDto.getName());
        roleEdit.setRoleDescription(roleEditDto.getDescription());
        roleEdit.setRoleState(roleEditDto.getState());
        try {
			roleService.updateRole(roleEdit);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity(new Message(SYSTEM_ERROR_NO_ROLE), HttpStatus.BAD_REQUEST);
		}
        return new ResponseEntity(new Message(SYSTEM_SUCCESS_EDIT_ROLE), HttpStatus.CREATED);
	}
	
	@SuppressWarnings(value = { "rawtypes", "unchecked" })
	@GetMapping(value=URL_SECURITY_DELETExROLE_GET)
	public ResponseEntity<?> roleDelete(@PathVariable(name="id")Long id) {
		try {
			roleService.deleteRole(id);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity(new Message(SYSTEM_ERROR_NO_ID), HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity(new Message(SYSTEM_SUCCESS_DELETE_ROLE), HttpStatus.OK);
	}
	
	/**
	 * @param roleType
	 * @param roleTypeDescription
	 * @return
	 */
	private RoleHeaderDto roleHeaderDtoByType(Character roleType, String roleTypeDescription) {
		Iterable<Role> roles = roleService.getRolesByType(roleType);
		RoleHeaderDto roleHeaderDto = new RoleHeaderDto(roleType, roleTypeDescription);
		List<RoleTypeDto> rolesTypeDto = new ArrayList<>();
		for(Role role: roles) {
			rolesTypeDto.add(new RoleTypeDto(role.getRoleId(), role.getRoleName(), role.getRoleState()));
		}
		roleHeaderDto.setRolesType(rolesTypeDto);
		return roleHeaderDto;
	}

}
